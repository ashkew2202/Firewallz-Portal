# Generated by Django 5.2.6 on 2025-09-05 17:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import firewallz.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='College',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('address', models.CharField(max_length=200)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('pcr_notes', models.TextField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to=firewallz.models.college_logo_path, verbose_name='College Logo')),
                ('letter_code', models.CharField(blank=True, max_length=4, null=True, unique=True)),
                ('is_captains_locked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_form_visible', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'College',
                'verbose_name_plural': 'Colleges',
            },
        ),
        migrations.CreateModel(
            name='CustomBaseUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('photo_url', models.TextField(blank=True, default='', help_text="URL of the user's profile photo")),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('player', 'Player')], default='player', help_text='Type of user: admin or player', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custombaseuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custombaseuser_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(verbose_name='Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone_number', models.PositiveBigIntegerField(help_text='10 digit phone number without country code', validators=[django.core.validators.MaxValueValidator(9999999999), django.core.validators.MinValueValidator(1000000000)], verbose_name='Phone Number')),
                ('photo', models.URLField(blank=True, null=True, verbose_name='Photo URL')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('status', models.CharField(choices=[('pcr_confirmed', 'PCr Confirmed'), ('pcr_unconfirmed', 'PCr Unconfirmed')])),
                ('is_coach', models.BooleanField(default=False, help_text='Is the player a coach?', verbose_name='Is Coach?')),
                ('verified_by_firewallz', models.BooleanField(default=False, verbose_name='Is Verified By Firewallz?')),
                ('verified_by_controls', models.BooleanField(default=False, verbose_name='Is Verified By Controls?')),
                ('is_onspot', models.BooleanField(default=False)),
                ('pcr_discount', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('sports_if_coach', models.TextField(blank=True, default=None, null=True)),
                ('num_emails_sent', models.IntegerField(default=0, verbose_name='Number of Payment Emails Sent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('arrival_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('arrival_route', models.CharField(blank=True, choices=[('LHU -> PLI', 'LHU -> PLI'), ('IGI -> PLI', 'IGI -> PLI')], max_length=200, null=True)),
                ('auth_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='player', to=settings.AUTH_USER_MODEL)),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='firewallz.college')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
            },
        ),
        migrations.AddField(
            model_name='college',
            name='representative',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='college_rep', to='firewallz.player'),
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Mixed', 'Mixed')], max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('rulebook_link', models.URLField(blank=True, null=True)),
                ('max_players', models.PositiveIntegerField(default=1)),
                ('min_players', models.PositiveIntegerField(default=0)),
                ('app_icon', models.ImageField(blank=True, null=True, upload_to=firewallz.models.sports_icon_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Sport',
                'verbose_name_plural': 'Sports',
                'indexes': [models.Index(fields=['is_deleted'], name='firewallz_s_is_dele_c2f131_idx')],
                'unique_together': {('name', 'gender')},
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=30)),
                ('is_two_team_event', models.BooleanField(default=False)),
                ('is_playerwise', models.BooleanField(default=False)),
                ('icon', models.ImageField(blank=True, null=True, upload_to=firewallz.models.events_icon_path)),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='firewallz.sport')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('team_code', models.CharField(help_text='A human-readable identifier for the team', max_length=255, unique=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('captain', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='captain_of', to='firewallz.player')),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='firewallz.college')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='firewallz.sport')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
        ),
        migrations.CreateModel(
            name='TeamPlayer',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pcr_approved', 'PCr Approved'), ('pcr_unapproved', 'PCr Unapproved')], default='pcr_unapproved', verbose_name='PCr Approval Status')),
                ('is_playing', models.BooleanField(default=False, help_text='Has this player been added to the team by the captain? Very important field.', verbose_name='Has Been Added To The Team?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('events', models.ManyToManyField(help_text='Events in this sport in which the player is participating', related_name='team_players', to='firewallz.event')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_players', to='firewallz.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_players', to='firewallz.team')),
            ],
            options={
                'verbose_name': 'Team Player',
                'verbose_name_plural': 'Team Players',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reference_no', models.CharField(max_length=100)),
                ('checksum', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_url', models.TextField(blank=True, null=True)),
                ('amount', models.PositiveIntegerField(default=0)),
                ('applied_pcr_discount', models.PositiveIntegerField(default=0)),
                ('metadata', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('SUCCESS', 'SUCCESS'), ('FAILED', 'FAILED'), ('TIMEOUT', 'TIMEOUT')], default='PENDING')),
                ('type', models.CharField(choices=[('PCR', 'PCR'), ('SWD', 'SWD'), ('CR', 'CR'), ('TEAM_CAPTAIN', 'TEAM_CAPTAIN'), ('PLAYER', 'PLAYER')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('paid_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions_by', to='firewallz.player')),
                ('paid_for', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='firewallz.player')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
            },
        ),
        migrations.CreateModel(
            name='SportPayment',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.PositiveIntegerField(default=200)),
                ('transaction_status', models.CharField(choices=[('PENDING', 'PENDING'), ('SUCCESS', 'SUCCESS'), ('FAILED', 'FAILED'), ('TIMEOUT', 'TIMEOUT')], default='PENDING')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('team_player', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sport_payment', to='firewallz.teamplayer')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sport_payment', to='firewallz.transaction')),
            ],
            options={
                'verbose_name': 'Sport Payment',
                'verbose_name_plural': 'Sport Payments',
            },
        ),
        migrations.CreateModel(
            name='BasePayment',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.PositiveIntegerField(default=1300)),
                ('transaction_status', models.CharField(choices=[('PENDING', 'PENDING'), ('SUCCESS', 'SUCCESS'), ('FAILED', 'FAILED'), ('TIMEOUT', 'TIMEOUT')], default='PENDING')),
                ('half_payment', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='base_payment', to='firewallz.player')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='base_payment', to='firewallz.transaction')),
            ],
            options={
                'verbose_name': 'Base Payment',
                'verbose_name_plural': 'Base Payments',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('photo_url', models.TextField(blank=True, default='')),
                ('phone_number', models.PositiveBigIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(9999999999), django.core.validators.MinValueValidator(1000000000)])),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10, null=True)),
                ('is_outstie', models.BooleanField(default=False, help_text='Is the user a non-BITSian?')),
                ('reg_token', models.CharField(blank=True, null=True)),
                ('is_disabled', models.BooleanField(default=False)),
                ('comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('auth_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='BITSianProfile',
            fields=[
                ('static_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=200)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('bits_id', models.CharField(max_length=20, unique=True, verbose_name='BITS ID')),
                ('room_no', models.CharField(max_length=10)),
                ('bhavan', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bits_student', to='firewallz.userprofile')),
            ],
            options={
                'verbose_name': 'BITS Student',
                'verbose_name_plural': 'BITS Students',
            },
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['name'], name='firewallz_p_name_f58eed_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['email'], name='firewallz_p_email_69daa7_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['college'], name='firewallz_p_college_595e03_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['is_deleted'], name='firewallz_p_is_dele_0e660c_idx'),
        ),
        migrations.AddIndex(
            model_name='college',
            index=models.Index(fields=['is_deleted'], name='firewallz_c_is_dele_f5eb46_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('sport', 'name')},
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['sport'], name='firewallz_t_sport_i_db76fd_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['college'], name='firewallz_t_college_9d57cb_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['is_deleted'], name='firewallz_t_is_dele_3bfcba_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('sport', 'college')},
        ),
        migrations.AddIndex(
            model_name='teamplayer',
            index=models.Index(fields=['player'], name='firewallz_t_player__d113b8_idx'),
        ),
        migrations.AddIndex(
            model_name='teamplayer',
            index=models.Index(fields=['team'], name='firewallz_t_team_id_f63721_idx'),
        ),
        migrations.AddIndex(
            model_name='teamplayer',
            index=models.Index(fields=['is_playing'], name='firewallz_t_is_play_033521_idx'),
        ),
        migrations.AddIndex(
            model_name='teamplayer',
            index=models.Index(fields=['is_deleted'], name='firewallz_t_is_dele_844929_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['paid_for'], name='firewallz_t_paid_fo_b4ed1d_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['paid_by'], name='firewallz_t_paid_by_422d0b_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['status'], name='firewallz_t_status_5482b6_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['type'], name='firewallz_t_type_73d0bb_idx'),
        ),
        migrations.AddIndex(
            model_name='sportpayment',
            index=models.Index(fields=['team_player'], name='firewallz_s_team_pl_61d626_idx'),
        ),
        migrations.AddIndex(
            model_name='sportpayment',
            index=models.Index(fields=['transaction'], name='firewallz_s_transac_1abd8a_idx'),
        ),
        migrations.AddIndex(
            model_name='sportpayment',
            index=models.Index(fields=['transaction_status'], name='firewallz_s_transac_f39748_idx'),
        ),
        migrations.AddIndex(
            model_name='basepayment',
            index=models.Index(fields=['player'], name='firewallz_b_player__50cd92_idx'),
        ),
        migrations.AddIndex(
            model_name='basepayment',
            index=models.Index(fields=['transaction'], name='firewallz_b_transac_6e73e9_idx'),
        ),
        migrations.AddIndex(
            model_name='basepayment',
            index=models.Index(fields=['transaction_status'], name='firewallz_b_transac_54c52f_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['name'], name='firewallz_u_name_a771c7_idx'),
        ),
    ]
